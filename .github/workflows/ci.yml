name: CI
run-name: ${{ github.actor }} will sehen, ob die CI-Pipeline geht
on: 
  push:
    branches:
      - '*'
jobs:
  webfrontend:
    runs-on: ubuntu-latest
    steps:
#hier ist das Template f체r das Backend. Den entsprechenden Branch noch anpassen, falls nicht basierend auf backend branch gebaut werden soll
       - uses: actions/checkout@v2
         with:
           ref: backend   # <----- Hier anpassen
       - run: printf "FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build\n\nWORKDIR /source\n\nCOPY selfservicetool/sstWebAPI/*.sln .\nCOPY selfservicetool/sstWebAPI/sstWebAPI/*.csproj ./sstWebAPI/\nRUN dotnet restore\n\nCOPY selfservicetool/sstWebAPI/. ./sstWebAPI/\nWORKDIR /source/sstWebAPI\nRUN dotnet restore\nRUN dotnet publish -c release -o /app --no-restore\n\nFROM mcr.microsoft.com/dotnet/aspnet:8.0\nWORKDIR /app\nCOPY --from=build /app ./\n\nRUN sed -i 's/server=localhost/server=database/g' /app/appsettings.json\n\nENTRYPOINT [\"dotnet\", \"sstWebAPI.dll\"]\n" > ../Dockerfile
       - run: docker build .. -t backend 


#hier ist das Template f체r das Frontend. Da Adrian immer neue Branches verwendet, steht als Branch im Moment Main, der muss halt auf den neuen Branch ge채ndert werden. Dockerfile sollte aber nicht angepasst werden m체ssen
       - uses: actions/checkout@v2
#         with:
#           ref: main   # <----- Hier anpassen
       - run: printf "FROM node\n\nRUN mkdir -p /srv/frontend\n\nRUN chown node: /srv/frontend\n\nCOPY selfservicetool/frontend /srv/frontend\n\nWORKDIR /srv/frontend\n\nUSER node\n\nRUN npm ci && npm cache clean --force\n\nENTRYPOINT npm start" > ../Dockerfile
       - run: docker build .. -t frontend
